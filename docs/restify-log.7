.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "RESTIFY\-LOG" "7" "May 2011" "" ""
.
.SH "NAME"
\fBrestify\-log\fR \- The restify Logger
.
.SH "SYNOPSIS"
.
.nf

var restify = require(\'restify\');
var log = restify\.log;

log\.level(restify\.LogLevel\.Debug);

if (log\.debug()) {
  log\.debug(\'Here\'s an object: %o\', { foo: \'bar\' });
}
.
.fi
.
.SH "DESCRIPTION"
The restify logger is a minimal log4j\-esque logger that restify uses internally, and is generally useful for most projects\. It logs a standard formatted message to \fBstderr\fR, and prefixes like:
.
.IP "" 4
.
.nf

YYYY\-MM\-DD HH:MM:SSZ <LEVEL>: sprintf formatted message here\.
.
.fi
.
.IP "" 0
.
.P
Level is one of the following, in descending order:
.
.IP "\(bu" 4
Fatal
.
.IP "\(bu" 4
Error
.
.IP "\(bu" 4
Warn
.
.IP "\(bu" 4
Info
.
.IP "\(bu" 4
Debug
.
.IP "\(bu" 4
Trace
.
.IP "" 0
.
.P
Descending means if you set the level to say \'Warn\', then the logger will only output messages that are of level Fatal/Error/Warn\. Everything else will be surpressed\. The default level is Info\.
.
.P
Each level is accessed by a lower\-case method of the same name:
.
.IP "\(bu" 4
log\.fatal()
.
.IP "\(bu" 4
log\.error()
.
.IP "\(bu" 4
log\.warn()
.
.IP "\(bu" 4
log\.info()
.
.IP "\(bu" 4
log\.debug()
.
.IP "\(bu" 4
log\.trace()
.
.IP "" 0
.
.P
These methods take an \fBsprintf\fR style message, where the following format qualifiers are supported:
.
.IP "\(bu" 4
%d Number
.
.IP "\(bu" 4
%s String
.
.IP "\(bu" 4
%o Object (uses node\.js util\.inspect())
.
.IP "" 0
.
.P
You can check for a level being enabled in your code by calling these functions with no arguments:
.
.IP "" 4
.
.nf

if (log\.debug()) {
   // Some expensive calculation
   log\.debug(\'Here\'s %s object: %o\', \'foo\', {});
}
.
.fi
.
.IP "" 0
.
.P
The restify framework uses Fatal/Error/Warn/Info/Trace\. To get verbose internal logging from restify, set the level to Trace\. Debug is intended to be used by applications as a useful way to generate debug logs\.
.
.P
Finally, set the level with \fBlog\.level\fR\. The level params are on the: \fBrestify\.LogLevel\fR object\.
.
.SH "COPYRIGHT/LICENSE"
Copyright 2011 Mark Cavage \fImcavage@gmail\.com\fR
.
.P
This software is licensed under the MIT License\.
.
.SH "SEE ALSO"
restify(3)
