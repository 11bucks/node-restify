.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "RESTIFY\-ROUTES" "7" "May 2011" "" ""
.
.SH "NAME"
\fBrestify\-routes\fR \- Routing in Restify
.
.SH "SYNOPSIS"
.
.nf

function authenticate(req, res, next) {
  // Check the Authorization header
  return next();
}

function authorize(req, res, next) {
  // Check ownership of resource
  return next();
}

function audit(req, res, next) {
  // Log this request/response
  return next();
}

var pre = [
  authenticate,
  authorize
];

var post = [
  audit
];

server\.get(\'/your/:param/:id\', pre, function(req, res, next) {
  res\.send(200, {
    id: req\.uriParams\.id,
    message: \'You sent \' + req\.uriParams\.param,
sent: req\.params
  });
  return next();
}, post);
.
.fi
.
.SH "DESCRIPTION"
Restify routing looks like a simplified version of Sinatra\. Basically, you define an HTTP resource path, and optionally paramterize any section of it with \fB:parameters\fR, and restify will do the work of mapping an HTTP verb and resource to your handler chain\. Anything in the syntax \fB:param\fR in your uri gets set on the \fBrequest\.uriParams\fR object with that name\.
.
.P
Everythng after the first argument is any combination of filters/interceptors that run in the order you define them\. Each function is responsible for calling \fBnext()\fR, otherwise the chain stops\. While you can do whatever you want here, the author recommends a pattern of an array of \fBpre\fR interceptors, a route specific \fBhandler\fR, followed by an array of \fBpost\fR interceptors\. Also, note that restify does not come bundled with any functions to perform common tasks, like authenticate/authorize/audit, as these are often domain\-specific\.
.
.SH "HTTP VERBS"
Currently restify supports the following verbs as route definitions:
.
.IP "\(bu" 4
HEAD: server\.head(\.\.\.)
.
.IP "\(bu" 4
GET: server\.get(\.\.\.)
.
.IP "\(bu" 4
POST: server\.post(\.\.\.)
.
.IP "\(bu" 4
PUT: server\.put(\.\.\.)
.
.IP "\(bu" 4
DELETE: server\.del(\.\.\.)
.
.IP "" 0
.
.SH "RESTIFY ERROR RESPONSES"
When a request comes in, and there is no matching resource at all, restify will return a 404 error message to the client\. If the resource does exist, but there is not a matching route for the given verb, restify will return a 405\. This is what RFC 2616 tells us we should do, so that\'s what we do\.
.
.SH "ACCESS\-CONTROL\-ALLOW\-METHODS"
restify automatically inserts an access\-control\-allow\-methods header on \fBresponse\.send\fR, and fills it in with all verbs that match the current resource\.
.
.P
For example, the following code:
.
.IP "" 4
.
.nf

server\.get(\'/foo\', function(req, res, next) { \.\.\. });
server\.put(\'/foo\', function(req, res, next) { \.\.\. });
server\.del(\'/foo\', function(req, res, next) { \.\.\. });
.
.fi
.
.IP "" 0
.
.P
Would result in restify sending back an access\-control\-allow\-methods header that was the array \fB[GET, PUT, DELETE]\fR when a request was issued against \fB/foo\fR\.
.
.SH "COPYRIGHT/LICENSE"
Copyright 2011 Mark Cavage \fImcavage@gmail\.com\fR
.
.P
This software is licensed under the MIT License\.
.
.SH "SEE ALSO"
restify(3)
